{"version":3,"sources":["james/map/map.js","james/floodBackground/floodBackground.js","james/home/home.js","App.js","serviceWorker.js","index.js"],"names":["Map","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","initViz","vizContainer","window","tableau","Viz","width","height","_this","react_default","a","createElement","className","ref","div","React","Component","FloodBackground","Home","props","call","state","hideTopButton","_this2","Events","scrollEvent","register","to","element","console","log","setState","undefined","scrollSpy","update","remove","scroll","scrollToTop","_this3","modules","spy","smooth","duration","index_esm","floodBackground_FloodBackground","name","onClick","map_Map","history","createBrowserHistory","App","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc79dd7f.chunk.js","sourcesContent":["import React from \"react\";\nimport tableau from \"tableau-api\";\nimport \"./map.css\";\n\nexport class Map extends React.Component {\n  componentDidMount() {\n    this.initViz();\n  }\n\n  initViz() {\n    const vizUrl = \"https://public.tableau.com/shared/XNYDSZ85Q?:display_count=yes&:origin=viz_share_link\";\n    const vizContainer = this.vizContainer;\n    let viz = new window.tableau.Viz(vizContainer, vizUrl, { width: \"90vw\", height: \"90vh\"});\n  }\n\n  render() {\n      return (\n        <div className=\"map-wrapper\">\n            <div className=\"map\" ref={(div) => { this.vizContainer = div; }}></div>\n        </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./floodBackground.css\";\nexport const FloodBackground = () => (\n    <div>\n        <div className=\"houston\">\n            <div className=\"waveTop\" />\n            <div className=\"waveBottom\" />\n        </div>\n        <div className=\"waves\"/>\n    </div>\n);\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { Map } from \"../map/map\";\nimport { FloodBackground } from \"../floodBackground/floodBackground\";\nimport { FaChevronDown, FaChevronCircleUp } from \"react-icons/fa\";\n\nimport \"./home.css\";\n\n// ES6 Imports\nimport * as Scroll from \"react-scroll\";\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from \"react-scroll\";\n\nexport class Home extends React.Component {\n\n    constructor(props) {\n        super( props );\n        this.state = {\n            hideTopButton:  false,\n        };\n    }\n\n    componentDidMount() {\n        Events.scrollEvent.register( \"begin\", ( to, element ) => {\n            console.log( \"begin\", to );\n        } );\n\n        Events.scrollEvent.register( \"end\", ( to, element ) => {\n            this.setState( { hideTopButton: to === undefined } );\n\n        } );\n\n        scrollSpy.update();\n\n    }\n\n    componentWillUnmount() {\n        Events.scrollEvent.remove( \"begin\" );\n        Events.scrollEvent.remove( \"end\" );\n    }\n\n    scrollToTop() {\n        scroll.scrollToTop();\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div>\n                    <div className=\"title-wrapper\">\n                        <Link to=\"mapSection\" spy={true} smooth={true} duration={500}>\n                            <FaChevronDown className=\"down-button\" />\n                        </Link>\n                        <div className=\"title-contents\">\n                            <h1>RAIN PAIN</h1>\n                            <div className=\"raindrop-logo\"></div>\n                        </div>\n                        <FloodBackground />\n                    </div>\n                </div>\n\n                <Element name=\"mapSection\">\n                    <div className=\"about-section\">\n                        {!this.state.hideTopButton ?\n                            <a className=\"top-button-wrapper\" onClick={() => this.scrollToTop()}>\n                                <FaChevronCircleUp className=\"top-button\" /></a> : null}\n                        <Map/>\n                    </div>\n                </Element>\n\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Router, Route } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\nimport { Home } from \"./james/home/home\"\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./bootstrap/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}